#+Title: Emacs configuration
#+OPTIONS: num:nil
#+SETUPFILE: /home/silin/.emacs.d/org-html-themes/org/theme-bigblow.setup
#+STARTUP: overview 
* configuation
./configure --with modules --with mailutils
| C-M-w   | worterbuch              |
| C-M-t   | terminal                |
| C-M-f   | internet browser        |
| C-M-j   | switch buffer           |
| C-M-o   | read only mode          |
| C-c C-c | excute                  |
| C-c C-q | add tags                |
| C-c C-t | todo                    |
| C-c a   | agenda                  |
| C-c c   | capture                 |
| C-c C-o | js2-mode-toggle-element |
| M-q     | org-fill-paragraph      |
| M-:     | Eval                    |
|         |                         |

* commods
|--------------------------+-----------------------------------------------------------------------|
| M-!                      | shell command                                                         |
| M-c                      | Capitalise the first alphabet                                         |
| C-u TAB                  | overview - contents -showall                                          |
| org mode manual in emccs | M-x org-info                                                          |
| C-x C-q                  | enable readonly                                                       |
| C-;                      | 可以检查当前单词的拼写                                                |
| C-c C-z                  | add note to items, quick note                                         |
| C-c C-c                  | switch between them                                                   |
|--------------------------+-----------------------------------------------------------------------|
| C-c ' (C-c C-v C-v)      | open src block                                                        |
| C-c C-v C-v              | open src block in read only                                           |
|--------------------------+-----------------------------------------------------------------------|
| C-u C-c C-v t            | tangle only the current block                                         |
|--------------------------+-----------------------------------------------------------------------|
| <s Tab                   | old version (require 'org-tempo) new version executable               |
| C-c C-,                  | new version                                                           |
| C-c C-x C-v              | view png of latex in SRC                                              |
| C-c C-x C-l              | view image of latex in pure orgmode                                   |
| C-c '                    | edit all src in a new buffer with mode                                |
| M-C-l                    | latex-math-preview-insert-mathematical-symbol                         |
| C-c o                    | (clm/toggle-comand-log-buffer) to open command-log and again to close |
| C-c C-e                  | export org                                                            |
|                          |                                                                       |
|--------------------------+-----------------------------------------------------------------------|


|------------------+---------+-----------------------------------|
| string-rectangle | C-x r t | add the same in the select column |
| kill-rectangle   | C-x r k | delete the seleted column         |
| yank-rectangle   | C-x r y | yank the column                   |
| rectangle-make   | C-x Spe | select range                      |
|------------------+---------+-----------------------------------|



| C-x C-Space | pop-global-mark |
|             |                 |

** terminal
S-C-c : can copy out from terminal
S-C-v : can paste into terminal
C-h : backwards to delete
C-j : enter
C-k : cut after
C-u : cut before

** set hotkey
for current buffer keybindings settings
M-x: global-set-key 
Press the wanted keybindings
input the mapped command
#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-o" 'compile)
  (global-set-key (kbd "C-c C-.") 'org-mark-ring-goto)
  (global-set-key (kbd "C-M-,") 'menu-bar-mode)
  (global-set-key (kbd "C-M-q") 'ivy-switch-buffer-kill)
#+End_src

#+RESULTS:
: ivy-switch-buffer-kill

* global settings
#+BEGIN_SRC emacs-lisp
      (setq colon-double-space t)
        ;; tell the Emacs fill commands to insert two spaces after a colon:

        ;; Rebind 'C-x C-b' for 'buffer-menu'
        (global-set-key "\C-x\C-b" 'buffer-menu)
        ;; which not only lists the buffers, but moves point into that window

        ;; Set cursor color
        (set-cursor-color "white")

        ;; Set mouse color
        (set-mouse-color "white")

        ;;(setq make-backup-files nil)

        ;;close tool bar 
        (setq inhibit-startup-message t)
        (tool-bar-mode -1)

        ;;close menu bar
        (menu-bar-mode -1)

        ;;close toggle sroll bar
        (toggle-scroll-bar -1)
        ;; parse
        (show-paren-mode t)

        ;; user y and n instead of yes and no 
        (fset 'yes-or-no-p 'y-or-n-p)

        ;; open line number at left side
        ;;  (global-linum-mode 1)

        ;; emacsclient -a "" -c
        ;; shortcut to open emacsclient settings in terminal

        ;; set the meta-key to be super key
        ;; (setq  x-meta-keysym 'super
        ;;        x-super-keysym 'meta)

        ;; open terminal 
        (global-set-key "\C-\M-x" 'term)

        ;; open  eshell
        (global-set-key "\C-x\ \C-x" 'shell)

        ;;open init.el file with f1
        (defun open-my-init-file()
          (interactive)
          (find-file "~/.emacs.d/init.el"))
        (global-set-key (kbd "<f1>") 'open-my-init-file)

        ;;open myinit.org file  with f2
        (defun open-my-init-org-file()
          (interactive)
          (find-file "~/Dropbox/cs/Limacs/myinit.org"))
        (global-set-key (kbd "<f2>") 'open-my-init-org-file)

        ;;open .bashrc file with f3
        (defun open-my-bash-file()
          (interactive)
          (find-file "~/.bashrc"))
        (global-set-key (kbd "<f3>") 'open-my-bash-file)

        ;;open .bashrc file with f4
        (defun open-my-tagsnote-file()
          (interactive)
          (find-file "~/Dropbox/Note/Note.org.gpg"))
        (global-set-key (kbd "<f4>") 'open-my-tagsnote-file)


        ;; trun off cl warning
        (setq byte-compile-warnings '(cl-functions))

        ;; backup oder
        (setq backup-directory-alist `(("." . "~/.emacs.d/backup")))
        (setq backup-by-copying t)

        ;;M-x toggle-truncate-line
       ;; off the word wrap 是否移动换行
       (toggle-truncate-lines 1)

       ;; open window horizontally default
       (setq split-height-threshold nil)
       (setq split-width-threshold 0 )


        ;; automatically update file
       (global-auto-revert-mode t)

  ;;M-n select-current-line
    (defun select-current-line ()
      "Select the current line"
      (interactive)
      (end-of-line) ; move to end of line
      (set-mark (line-beginning-position)))
    (global-set-key (kbd "M-n") 'select-current-line)

;; read only file
  (global-set-key (kbd "C-M-o") 'read-only-mode)

#+END_SRC

#+RESULTS:
: open-my-bash-file
* lsp-java
  With above setup done, below we will setup several packages closely related to LSP.
** java configuation
#+begin_src emacs-lisp
(setq EMACS_DIR "~/.emacs.d/")
(setenv "JAVA_HOME" "/usr/lib/jvm/java-11-openjdk-amd64")

#+end_src

** Dap Mode
Emacs Debug Adapter Protocol aka DAP Mode allows us to debug your program. Below we will integrate ~dap-mode~ with ~dap-hydra~. ~Dap-hydra~ shows keys you can use to enable various options and jump through code at runtime. After we install dap-mode we will also install ~dap-java~.

#+begin_src emacs-lisp
(use-package dap-mode
  :ensure t
  :after (lsp-mode)
  :functions dap-hydra/nil
  :config
  (require 'dap-java)
  :bind (:map lsp-mode-map
         ("<f5>" . dap-debug)
         ("M-<f5>" . dap-hydra))
  :hook ((dap-mode . dap-ui-mode)
    (dap-session-created . (lambda (&_rest) (dap-hydra)))
    (dap-terminated . (lambda (&_rest) (dap-hydra/nil)))))

(use-package dap-java :ensure nil)
#+end_src

** Treemacs
Treemacs provides UI elements used for LSP UI. Let's install lsp-treemacs and its dependency treemacs. We will also Assign ~M-9~ to show error list.
#+begin_src emacs-lisp
(use-package lsp-treemacs
  :after (lsp-mode treemacs)
  :ensure t
  :commands lsp-treemacs-errors-list
  :bind (:map lsp-mode-map
         ("M-9" . lsp-treemacs-errors-list)))

(use-package treemacs
  :ensure t
  :commands (treemacs)
  :after (lsp-mode))
#+end_src

** LSP UI
LSP UI is used in various packages that require UI elements in LSP. E.g ~lsp-ui-flycheck-list~ opens a windows where you can see various coding errors while you code. You can use ~C-c l T~ to toggle several UI elements. We have also remapped some of the xref-find functions, so that we can easily jump around between symbols using ~M-.~, ~M-,~ and ~M-?~ keys.

#+begin_src emacs-lisp
(use-package lsp-ui
:ensure t
:after (lsp-mode)
:bind (:map lsp-ui-mode-map
         ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
         ([remap xref-find-references] . lsp-ui-peek-find-references))
:init (setq lsp-ui-doc-delay 1.5
      lsp-ui-doc-position 'bottom
	  lsp-ui-doc-max-width 100
))
#+end_src

Go through this [[https://github.com/emacs-lsp/lsp-ui/blob/master/lsp-ui-doc.el][link]]  to see what other parameters are provided.

** Helm LSP
Helm-lsp provides various functionality to work with the code. E.g Code actions like adding *getter, setter, toString*, refactoring etc. You can use ~helm-lsp-workspace-symbol~ to find various symbols (classes) within your workspace.

LSP's built in symbol explorer uses ~xref-find-apropos~ to provide symbol navigation. Below we will replace that with helm version. After that you can use ~C-c l g a~ to find workspace symbols in a more intuitive way.

#+begin_src emacs-lisp
(use-package helm-lsp
:ensure t
:after (lsp-mode)
:commands (helm-lsp-workspace-symbol)
:init (define-key lsp-mode-map [remap xref-find-apropos] #'helm-lsp-workspace-symbol))
#+end_src

** Install LSP Package
Let's install the main package for lsp. Here we will integrate lsp with which-key. This way, when we type the prefix key ~C-c l~ we get additional help for compliting the command. 

#+begin_src emacs-lisp
(use-package lsp-mode
:ensure t
:hook (
   (lsp-mode . lsp-enable-which-key-integration)
   (java-mode . #'lsp-deferred)
)
:init (setq 
    lsp-keymap-prefix "C-c l"              ; this is for which-key integration documentation, need to use lsp-mode-map
    lsp-enable-file-watchers nil
    read-process-output-max (* 1024 1024)  ; 1 mb
    lsp-completion-provider :capf
    lsp-idle-delay 0.500
)
:config 
    (setq lsp-intelephense-multi-root nil) ; don't scan unnecessary projects
    (with-eval-after-load 'lsp-intelephense
    (setf (lsp--client-multi-root (gethash 'iph lsp-clients)) nil))
	(define-key lsp-mode-map (kbd "C-c l") lsp-command-map)
)
#+end_src

You can start LSP server in a java project by using ~C-c l s s~. Once you type ~C-c l~ ~which-key~ package should guide you through rest of the options. In above setting I have added some memory management settings as suggested in [[https://emacs-lsp.github.io/lsp-mode/page/performance/][this guide]]. Change them to higher numbers, if you find *lsp-mode* sluggish in your computer.

** LSP Java
This is the package that handles server installation and session management.
#+begin_src  emacs-lisp
(use-package lsp-java 
:ensure t
:config (add-hook 'java-mode-hook 'lsp))
#+end_src

* lsp-c++

[[https://emacs-lsp.github.io/lsp-mode/tutorials/CPP-guide/]]

#+begin_src emacs-lisp
  ;; (setq lsp-clangd-executable "clangd-9.0")
  ;; (setq lsp-clients-clangd-executable "clangd-9.0")
#+end_src


#+begin_src emacs-lisp
(setq package-selected-packages '(lsp-mode yasnippet lsp-treemacs helm-lsp
    projectile hydra flycheck company avy which-key helm-xref dap-mode))

  (when (cl-find-if-not #'package-installed-p package-selected-packages)
    (package-refresh-contents)
    (mapc #'package-install package-selected-packages))

  ;; sample `helm' configuration use https://github.com/emacs-helm/helm/ for details
  (helm-mode)
  (require 'helm-xref)
  (define-key global-map [remap find-file] #'helm-find-files)
  (define-key global-map [remap execute-extended-command] #'helm-M-x)
  (define-key global-map [remap switch-to-buffer] #'helm-mini)

  (which-key-mode)
  (add-hook 'c-mode-hook 'lsp)
  (add-hook 'cpp-mode-hook 'lsp)

  (setq gc-cons-threshold (* 100 1024 1024)
        read-process-output-max (* 1024 1024)
        treemacs-space-between-root-nodes nil
        company-idle-delay 0.0
        company-minimum-prefix-length 1
        lsp-idle-delay 0.1 ;; clangd is fast
        ;; be more ide-ish
        lsp-headerline-breadcrumb-enable t)

  (with-eval-after-load 'lsp-mode
    (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration)
    (require 'dap-cpptools)
    (yas-global-mode))

#+end_src
* lsp-jedi
#+begin_src emacs-lisp

  ;; (use-package lsp-jedi
  ;;   :ensure t
  ;;   :config
  ;;   (with-eval-after-load "lsp-mode"
  ;;     (add-to-list 'lsp-disabled-clients 'pyls)
  ;;     (add-to-list 'lsp-enabled-clients 'jedi)))





#+end_src

* C/C++
** Rtags

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet-snippets
    :ensure t
    :config)

  ;; (use-package rtags
  ;;   :ensure t
  ;;   :config
  ;;   (rtags-enable-standard-keybindings)
  ;;  (setq rtags-autostart-diagnostics t)
  ;;  (rtags-diagnostics)
  ;;  (setq rtags-completion-enabled t)
  ;;  (define-key c-mode-base-map (kbd "M-.")
  ;;    (function rtags-find-symbol-at-point))
  ;;  (define-key c-mode-base-map (kbd "M-,")
  ;;    (function rtags-find-references-at-point))
  ;;  )

  ;; (use-package cmake-ide
  ;;   :ensure t
  ;;   :config
  ;;   (cmake-ide-setup))


#+END_SRC
** ctags
#+begin_src emacs-lisp
   (setq path-to-ctags "/usr/local/bin/ctags")
   (defun create-tags (dir-name)
     "Create tags file."
     (interactive "DDirectory: ")
     (shell-command
      (format "%s -f TAGS -e -R %s" path-to-ctags (directory-file-name dir-name)))
   )
  (defadvice find-tag (around refresh-etags activate)
    "Rerun etags and reload tags if tag not found and redo find-tag.              
    If buffer is modified, ask about save before running etags."
   (let ((extension (file-name-extension (buffer-file-name))))
     (condition-case err
     ad-do-it
       (error (and (buffer-modified-p)
           (not (ding))
           (y-or-n-p "Buffer is modified, save it? ")
           (save-buffer))
          (er-refresh-etags extension)
          ad-do-it))))

  (defun er-refresh-etags (&optional extension)
  "Run etags on all peer files in current dir and reload them silently."
  (interactive)
  (shell-command (format "etags *.%s" (or extension "el")))
  (let ((tags-revert-without-query t))  ; don't query, revert silently          
    (visit-tags-table default-directory nil)))
 


#+end_src
** Irony
sudo apt install: cmake, clang, (or libclang), libclang-dev
M-x: irnoy-server-install
#+BEGIN_SRC emacs-lisp
  (use-package irony
    :ensure t
    :config
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

  (use-package company-irony
    :ensure t
    :config
    (require 'company)
    (add-to-list 'company-backends 'company-irony))

  (with-eval-after-load 'company
    (add-hook 'company-hook 'company-mode)
    (add-hook 'c-mode-hook 'company-mode))

  (use-package company-irony-c-headers
    :ensure t)

  (use-package flycheck-irony
    :ensure t
    :config
    (add-hook 'flycheck-mode-hook 'flycheck-irony-setup))

  (use-package irony-eldoc
    :ensure t
    :config
    (add-hook 'irony-mode-hook #'irony-eldoc))


#+END_SRC

#+RESULTS:
: t

** eglot
#+begin_src emacs-lisp
  (use-package eglot
    :ensure t
    :config)

   (require 'eglot)
  (add-to-list 'eglot-server-programs '((c++-mode c-mode) "clangd"))
  (add-hook 'c-mode-hook 'eglot-ensure)
  (add-hook 'c++-mode-hook 'eglot-ensure)
#+end_src
** bear
sudo apt install bear
* Python
src python is python2
src ipython is python3
** python  


M-x : package install : company-anaconda
SCR python for python2
ipython for python3

  (global-set-key (kbd "C-c C-p") 'python-shell-send-region)
  this  setting doesn't work, so if you want to, please call it direct, but run M-x run python at first
  1, go to src block with python interpreter
  2, M-x run python in new buffer
  3, mark the region in src block
  4, M-x python shell send region

C-c C-z : open a python shell  
C-c C-c : run the selected python script in python interpreter
C-c . jedi: go to definition
C-c , jedi: go to definition pop marker

#+begin_src sh
   pip3 install jupyter
   pip3 install ipython
   pip3 install jupyter_console
   pip3 install jupyter_client
   pip3 install matplotlib
   pip3 install numpy
   pip3 install pandas
   pip3 install seaborn
   pip3 install pykalman
   pip3 install statsmodels
   pip3 install tabulate
#+end_src

#+BEGIN_SRC emacs-lisp
  (use-package python
    :ensure t
    ;;        :custom
    :mode ("\\.py\\'" . python-mode)
    :interpreter ("/usr/bin/python3.6" . python-mode)
    :config
    (setq indent-tabs-mode nil)
    (setq python-indent-offset 4)
    (use-package py-autopep8
      :ensure t
      :hook ((python-mode . py-autopep8-enable-on-save))
      ))

  (use-package company-jedi
    :ensure t
    :config
    (add-hook 'python-mode-hook 'jedi:setup)
    (add-hook 'python-mode-hook (lambda ()
                                  (add-to-list (make-local-variable 'company-backends) 'company-jedi))))


  (use-package elpy
    :ensure t
    :init
    (elpy-enable)
    :config
    (setq elpy-rpc-backend "jedi"))

  (use-package virtualenvwrapper
    :ensure t
    :config
    (venv-initialize-interactive-shells)
    (venv-initialize-eshell))

  (defvar myPackages
    '(better-defaults
      elpy
      flycheck ;; add the flycheck package
      material-theme
      ein ;; add the ein package (Emacs ipython notebook)
      py-autopep8))

  (setq python-shell-interpreter "ipython")
  (setq python-shell-interpreter-args "-i --simple-prompt")

  ;; (setq python-shell-interpreter "jupyter"
  ;;       python-shell-interpreter-args "console --simple-prompt")

#+END_SRC

** python settings
#+begin_src emacs-lisp
(defun python-shell-send-region-or-line nil
  "Sends from python-mode buffer to a python shell, intelligently."
  (interactive)
  (cond ((region-active-p)
     (setq deactivate-mark t)
     (python-shell-send-region (region-beginning) (region-end))
 ) (t (python-shell-send-current-statement))))

(defun python-shell-send-current-statement ()
"Send current statement to Python shell.
Taken from elpy-shell-send-current-statement"
(interactive)
(let ((beg (python-nav-beginning-of-statement))
    (end (python-nav-end-of-statement)))
(python-shell-send-string (buffer-substring beg end)))
(python-nav-forward-statement))


#+end_src

** lsp-python
 pip install python-language-server[all]
 pip install jedi-language-server
 pip install pytest
 #+begin_src emacs-lisp
    (use-package python-mode
    :ensure t
    :hook (python-mode . lsp-deferred))
 #+end_src

** eamcs notebook
*** Install
official link [[https://tkf.github.io/emacs-ipython-notebook/#][document]]
emacs ipython notebook [[https://github.com/millejoh/emacs-ipython-notebook][github link]]

M-x package-refresh-contents RET
M-x package-install RET ein RET
M-x package install jupyter
emacs xxx.ipynb 
C-c C-l/o

sudo npm install -g tern

emacs xxx.ipynb
C-c C-o ( open the the ipython mode)

#+begin_src emacs-lisp
;;  (use-package jupyter)

#+end_src
*** commands
|----------+---------------------------------------------+--------------------|
| C-c C-a  | ein:worksheet-insert-cell-above-km          | 向上插入cell       |
| C-c C-b  | ein:worksheet-insert-cell-below-km          | 向下插入cell       |
| C-c C-c  | ein:worksheet-execute-cell-km               | 执行cell           |
| C-c C-k  | ein:worksheet-kill-cell-km                  | kill cell          |
| C-c C-s  | ein:worksheet-split-cell-at-point-km        | 划分cell           |
| C-c C-w  | ein:worksheet-copy-cell-km                  | 复制cell           |
| C-c C-l  | ein:worksheet-clear-output-km               | 清除结果           |
| C-c C-u  | ein:worksheet-change-cell-type-km           | 更换属性cell       |
| C-c C-z  | ein:notebook-kernel-interrupt-command-km    | 中断cell           |
| C-c C-y  | ein:worksheet-yank-cell-km                  | yank cell          |
| C-c RET  | ein:worksheet-merge-cell-km                 | 向上融合cell       |
| C-c C-f  | ein:file-open-km                            | 打开文件           |
| M-Ent    | ein:worksheet-execute-cell-and-goto-next-km | execute, goto next |
|          |                                             |                    |
|----------+---------------------------------------------+--------------------|
| <C-down> | ein:worksheet-goto-next-input-km            |                    |
| C-c C-n  | ein:worksheet-goto-prev-input-km            |                    |
| <C-up>   | ein:worksheet-goto-prev-input-km            |                    |
| C-c C-p  | ein:worksheet-goto-next-input-km            |                    |
| C-c down | pull cell down                              |                    |
| C-c up   | pull cell up                                |                    |

|-------------+------------------------------------------------|
| C-u C-c C-c | ein:worksheet-execute-all-cells                |
| C-c C-e     | ein:worksheet-toggle-output-km                 |
| C-c C-n     | ein:worksheet-goto-next-input-km               |
| C-c C-o     | ein:notebook-open-km                           |
| C-c C-p     | ein:worksheet-goto-prev-input-km               |
| C-c C-q     | ein:notebook-kill-kernel-then-close-command-km |
| C-c C-r     | ein:notebook-reconnect-session-command-km      |
| C-c C-t     | ein:worksheet-toggle-cell-type-km              |
| C-c C-v     | ein:worksheet-set-output-visibility-all-km     |
| C-c C-x     | Prefix Command                                 |
|-------------+------------------------------------------------|

** emacs-jupyter lab 
#+begin_src emacs-lisp
  ;; (let ((client (jupyter-kernel-client)))
  ;;   (jupyter-comm-initialize client "kernel1234.json")
  ;;   (jupyter-start-channels client))

  ;; (use-package simple-httpd)
  ;;   (require 'simple-httpd)
  ;;   (setq httpd-root "/var/www")
  ;;   (httpd-start)

  ;; (use-package edit-server)
  ;;   (require 'edit-server)
  ;;   (edit-server-start)
  ;;   (load-file "~/.emacs.d/packages/jupyterlab_emacs/edit_server_jupyterlab.el")

#+end_src

#+RESULTS:

* JS
open .js, tsserver will be started
js-jump-back
js-jump-to-definition
** js2-mode
#+begin_src emacs-lisp
    (use-package js2-mode
      :ensure t
      ;;    :ensure ac-js2
      :mode (("\\.js\\'" . js2-mode)
             ("\\.json\\'" . javascript-mode))
      :init
      ;;  (setq-default js2-basic-offset 2)
      (setq-default js2-global-externs '("module" "require" "assert" "setTimeout" "clearTimeout" "setInterval" "clearInterval" "location" "__d\
    irname" "console" "JSON"))
      (progn
        (add-hook 'js-mode-hook 'js2-minor-mode)
        (add-hook 'js2-mode-hook 'ac-js2-mode)
        )
      )

#+end_src

** tide
#+begin_src emacs-lisp
  (defun setup-tide-mode ()
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1)
    ;; company is an optional dependency. You have to
    ;; install it separately via package-install
    ;; `M-x package-install [ret] company`
    (add-to-list (make-local-variable 'company-backends)
                 'company-files)
    (company-mode +1))

  (add-hook 'js2-mode-hook #'setup-tide-mode)

  (use-package tide
    :ensure t
    :after (typescript-mode company flycheck)
    :hook ((typescript-mode . tide-setup)
           (typescript-mode . tide-hl-identifier-mode)
           (before-save . tide-format-before-save)))
#+end_src
** prettier
add ; when I forgot,
report error when I save


#+begin_src emacs-lisp
(use-package prettier-js
  :ensure t
  :hook ((js2-mode . prettier-js-mode))
  :config
  (setq prettier-js-args '("--trailing-comma" "all"
                           "--bracket-spacing" "false")))
#+end_src

** js2-refactor xref-js2 tern
#+BEGIN_SRC emacs-lisp
      (use-package js2-refactor
        :ensure t
        :config
        (progn
          (js2r-add-keybindings-with-prefix "C-c C-m")
          ;; eg. extract function with `C-c C-m ef`.
          (add-hook 'js2-mode-hook #'js2-refactor-mode)))

    (use-package xref-js2
      :ensure t)

      (use-package tern
        :ensure tern
        :ensure tern-auto-complete
        :config
        (progn
          (add-hook 'js-mode-hook (lambda () (tern-mode t)))
          (add-hook 'js2-mode-hook (lambda () (tern-mode t)))
          (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
          ;;(tern-ac-setup)
          ))

  (define-key tern-mode-keymap (kbd "M-.") nil)
  (define-key tern-mode-keymap (kbd "M-,") nil)

      ;; use web-mode for .jsx files
      (add-to-list 'auto-mode-alist '("\\.jsx$" . web-mode))


      ;; turn on flychecking globally
      (add-hook 'after-init-hook #'global-flycheck-mode)

      ;; disable jshint since we prefer eslint checking
      (setq-default flycheck-disabled-checkers
                    (append flycheck-disabled-checkers
                            '(javascript-jshint)))

      ;; use eslint with web-mode for jsx files
      (flycheck-add-mode 'javascript-eslint 'web-mode)

      ;; customize flycheck temp file prefix
      (setq-default flycheck-temp-prefix ".flycheck")

      ;; disable json-jsonlist checking for json files
      (setq-default flycheck-disabled-checkers
                    (append flycheck-disabled-checkers
                            '(json-jsonlist)))

#+END_SRC
* Typescript
#+begin_src emacs-lisp
(use-package ob-typescript
:ensure t)
#+end_src

* web-mode

|---------+-------------------------------+----------------------|
| M ;     | comment/uncomment lines       | 反/注释              |
| C-c C-f | toggle folding on a tag/block | 打开/关闭块          |
| C-c C-i | indent entire buffer          | 规范缩进整个buffer   |
| C-c C-m | mark and expand               | 选中整个所在的块内容 |
| C-c C-s | insert snippet                | 插入函数操作片段     |
|         |                               |                      |

M-x: package install ob-html-chrome
| mark all | tar                                    |   |
| C-c C-n  | toggle to the begin and end of a block |   |
| C-c C-f  | fold block                             |   |
|          |                                        |   |

#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :ensure t
    :config)
          ;;;;;;;;;;;;;;
                                          ;emmet-mode
          ;;;;;;;;;;;;;
  (require 'emmet-mode)
  (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
  (add-hook 'html-mode-hook 'emmet-mode)
  (add-hook 'web-mode-hook 'emmet-mode)
  (add-hook 'css-mode-hook  'emmet-mode)


  (use-package web-mode
    :ensure t
    :mode (("\\.html\\'" . web-mode)
           ("\\.erb\\'" . web-mode))
    :config
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-enable-current-element-highlight t)
    (setq web-mode-enable-css-colorization t)
    (set-face-attribute 'web-mode-html-tag-face nil :foreground "royalblue")
    (set-face-attribute 'web-mode-html-attr-name-face nil :foreground "powderblue")
    (set-face-attribute 'web-mode-doctype-face nil :foreground "lightskyblue")
    (setq web-mode-content-types-alist
          '(("vue" . "\\.vue\\'")))
    (use-package company-web
      :ensure t)
    (add-hook 'web-mode-hook (lambda()
                               (cond ((equal web-mode-content-type "html")
                                      (my/web-html-setup)))
                               )))

  (require 'web-mode)
  (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))

  (defun my-web-mode-hook ()
    "Hooks for Web mode."
    (setq web-mode-markup-indent-offset 2)
    )
  (add-hook 'web-mode-hook  'my-web-mode-hook)


#+END_SRC

#+RESULTS:
: ob-html-chrome

* ob-browser
#+begin_src emacs-lisp

      (add-to-list 'exec-path "/opt/local/bin")
      (setenv "PATH" (mapconcat 'identity exec-path ":"))

#+end_src
https://github.com/krisajenkins/ob-browser

* vue
#+begin_src emacs-lisp
  (defun my/web-vue-setup ()
    " Setup for web-mode vue files."
    (message "web-mode for vue setup")
    (setup-tide-mode)
    (flycheck-add-mode 'javascript-eslint 'web-mode)
    (my/use-eslint-from-node-modules)
    (flycheck-select-checker 'javascript-eslint)
    (flycheck-mode)
    (add-hook 'web-mode-hook #'setup-tide-mode)
    (add-hook 'web-mode-hook #'prettier-js-mode)
    (add-to-list (make-local-variable 'company-backends)
                 '(company-tide company-web-html company-files company-css))
    )
#+end_src

** eslint
#+begin_src emacs-lisp
(defun my/use-eslint-from-node-modules ()
;; use local eslint from node_modules before global
;; http://emacs.stackexchange.com/questions/21205/flycheck-with-file-relative-eslint-executable
(let* ((root (locate-dominating-file
(or (buffer-file-name) default-directory)
"node_modules"))
(eslint (and root
(expand-file-name "node_modules/eslint/bin/eslint.js"
root))))
(when (and eslint (file-executable-p eslint))
(setq-local flycheck-javascript-eslint-executable eslint))))
#+end_src

* Haskell
** haskell mode
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
  :ensure t
  :config
  (require 'haskell-interactive-mode)
  (require 'haskell-process)
  (add-hook 'haskell-mode-hook 'interactive-haskell-mode)
  )
#+END_SRC
** jupyter ihaskell
[[https://github.com/gibiansky/IHaskell][install step 1]]
[[https://github.com/kxxoling/blog/blob/master/haskell/ihaskell.md][install step 2]]

** babel haskell in src
#+begin_src emacs-lisp
  ;;; babel_haskell.el --- babel for haskell in src    -*- lexical-binding: t; -*-

  ;; Copyright (C) 2020  sx

  ;; Author: sx <sx@sx>
  ;; Keywords: tools, abbrev


  (defun send-to-haskell/file-with-buffer (file-name buffer)
    "Load FILE-NAME in a REPL session and associate it with BUFFER."
    (haskell-interactive-mode-reset-error (haskell-session))
    (haskell-process-file-loadish
     (format "load \"%s\"" (replace-regexp-in-string
                            "\""
                            "\\\\\""
                            file-name))
     nil
     buffer))

  (defun send-to-haskell/org-src-block (&optional arg)
    "Tangle the current Org mode source block and load it in a REPL session.
  With one universal prefix argument, only tangle the block at point."
    (interactive "P")
    (let* ((src-block
            (cond ((string= major-mode "org-mode")
                   ;; In an Org mode buffer, is the cursor in a source block?
                   (let ((info (org-babel-get-src-block-info t)))
                     (if info
                         (list info nil (current-buffer))
                       nil)))
                  (org-src-mode
                   ;; In a transient source code buffer.
                   (list org-src--babel-info (current-buffer)
                         (org-src--source-buffer)))
                  (t
                   ;; Not in an Org mode source block or transient code buffer.
                   nil)))
           (is-haskell-src
            (and src-block (string= "haskell" (nth 0 (nth 0 src-block))))))
      (unless is-haskell-src
        (user-error "Not in a Haskell source code block"))
      (when is-haskell-src
        (let* ((info (nth 0 src-block))
               (code-buffer (nth 1 src-block))
               (org-buffer (nth 2 src-block))
               (lang (nth 0 info))
               (contents (nth 1 info))
               (params (nth 2 info))
               (tangle-to (cdr (assq :tangle params)))
               (posn (nth 5 info)))
          ;; Tangle the relevant code block(s) and get the tangled file name.
          (let ((out-file
                 (cond ((string= tangle-to "no")
                        ;; Tangle this *single block* to a temporary file
                        (let* ((tmp-prefix "haskell-load-")
                               (tmp-suffix ".hs")
                               (tmp-file (concat
                                          (org-babel-temp-file tmp-prefix)
                                          tmp-suffix)))
                          (with-current-buffer org-buffer
                            (goto-char posn)
                            (let ((tangled-files
                                   (org-babel-tangle '(4) tmp-file)))
                              (message "Tangled: %s" tangled-files)
                              (nth 0 tangled-files)))))
                       (t
                        ;; Tangle all relevant blocks to a specified file
                        (with-current-buffer org-buffer
                          (goto-char posn)
                          ;; If `arg' is '(4), only tangle this single block.
                          (let* ((arg (if (equal arg '(4)) '(4) '(16)))
                                 (tangled-files
                                  (org-babel-tangle arg "haskell")))
                            (message "Tangled: %s" tangled-files)
                            (nth 0 tangled-files)))))))
            ;; Now visit this tangled file and load it in ghci.
            (if code-buffer
                ;; There is an existing code buffer, use a temporary buffer to
                ;; visit the tangled file.
                (with-temp-buffer
                  (insert-file-contents out-file t)
                  (send-to-haskell/file-with-buffer out-file code-buffer))
              ;; No existing code buffer, visit the file normally.
              ;; Set `NOWARN' to `t' to avoid prompting the user to reread the
              ;; file if the contents (on disk) have changed.
              (let ((tangled-buffer (find-file-noselect out-file t)))
                (with-current-buffer tangled-buffer
                  ;; Ensure the buffer name starts and ends with an asterisk.
                  (let ((buf-name (buffer-name)))
                    (unless (and (string-prefix-p "*" buf-name)
                                 (string-suffix-p "*" buf-name))
                      (rename-buffer (concat "*" buf-name "*"))))
                  (send-to-haskell/file-with-buffer out-file tangled-buffer))))
            nil)))))

#+end_src

** commands to excute haskell
*** in file.hs
C-c C-l  to execute file.hs and go to interactive environment 
Seeing ./black.hs
*** C-c C-c call in src
#+begin_src haskell   :results value 
#+begin_src haskell  :results value :eval (inferior-haskell-start-process)
  log2 :: Float -> Float
    log2 = logBase 2
    log2 43

#+end_src

#+RESULTS:
: Prelude> 5.426264754702098

#+end_src
in src can multi functions be defined. and the last call will be printed

with follow extension, can be easy C-c C-c executed, but not in send
to haskell log file, but only output the last result


Seeing Literatur Programm Grundlage
*** send to haskell/org-src-block

#+begin_src haskell
#+begin_src haskell  :results value :eval (inferior-haskell-start-process)
  log2 :: Float -> Float
    log2 = logBase 2
    log2 43

#+end_src



#+end_src

first to load file. ~/.emacs.d/packages/orgmode-babal-haskell.el
in one of src block M-x : send to haskell/org-src-block

in src block  without any extension can be load in send buffer(after
_src haskell), and the be called function can be many type.
 
important : in src block the calling syntax is NOT allowed

Seeing Literatur Programm Alternativen
* resize windows
Shift + Ctrl + left right down up

#+begin_src emacs-lisp
    (global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
    (global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
    (global-set-key (kbd "S-C-<down>") 'shrink-window)
    (global-set-key (kbd "S-C-<up>") 'enlarge-window)

#+end_src

#+RESULTS:
: enlarge-window

* spacemacs-theme
  M-x package-install  spacemacs-theme
  M-x customize-themes
  spacemacs dark

* Paste with xsel
sudo apt install xsel
#+BEGIN_SRC emacs-lisp
  (setq x-select-enable-primary t)
  (setq select-enable-primary t)

  ;; 支持emacs和外部程序的粘贴
  (setq x-select-enable-clipboard t)

  ;; use xsel to copy/paste in emacs-nox
  (unless window-system
    (when (getenv "DISPLAY")
      (defun xsel-cut-function (text &optional push)
        (with-temp-buffer
          (insert text)
          (call-process-region (point-min) (point-max) "xsel" nil 0 nil "--clipboard" "--input")))
      (defun xsel-paste-function()
        (let ((xsel-output (shell-command-to-string "xsel --clipboard --output")))
          (unless (string= (car kill-ring) xsel-output)
            xsel-output )))
      (setq interprogram-cut-function 'xsel-cut-function)
      (setq interprogram-paste-function 'xsel-paste-function)
      ))

#+END_SRC

#+RESULTS:
* Move-Text
#+BEGIN_SRC emacs-lisp
      (defun move-line (n)
        "Move the current line up or down by N lines."
        (interactive "p")
        (setq col (current-column))
        (beginning-of-line) (setq start (point))
        (end-of-line) (forward-char) (setq end (point))
        (let ((line-text (delete-and-extract-region start end)))
          (forward-line n)
          (insert line-text)
          ;; restore point to original column in moved line
          (forward-line -1)
          (forward-char col)))

      (defun move-line-up (n)
        "Move the current line up by N lines."
        (interactive "p")
        (move-line (if (null n) -1 (- n))))

      (defun move-line-down (n)
        "Move the current line down by N lines."
        (interactive "p")
        (move-line (if (null n) 1 n)))


      (defun move-region (start end n)
        "Move the current region up or down by N lines."
        (interactive "r\np")
        (let ((line-text (delete-and-extract-region start end)))
          (forward-line n)
          (let ((start (point)))
            (insert line-text)
            (setq deactivate-mark nil)
            (set-mark start))))

      (defun move-region-up (start end n)
        "Move the current line up by N lines."
        (interactive "r\np")
        (move-region start end (if (null n) -1 (- n))))

      (defun move-region-down (start end n)
        "Move the current line down by N lines."
        (interactive "r\np")
        (move-region start end (if (null n) 1 n)))


    (defun move-line-region-up (&optional start end n)
      (interactive "r\np")
      (if (use-region-p) (move-region-up start end n) (move-line-up n)))

    (defun move-line-region-down (&optional start end n)
      (interactive "r\np")
      (if (use-region-p) (move-region-down start end n) (move-line-down n)))

  ;; don't work in SRC block

    (global-set-key (kbd "M-<up>") 'move-line-region-up)
    (global-set-key (kbd "M-<down>") 'move-line-region-down)


#+END_SRC

#+RESULTS:
: move-line-region-down

* Doom Theme
   I tend to like *doom-themes* package. Below we will install doom theme. In addition, I will also install a package called *heaven-and-hell*. This allows us to toggle between two themes using a shortcut key. I will assign ~F6~ key to toggling the theme and ~C-c F6~ to set to default theme.

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
  :ensure t 
  :init 
  (load-theme 'doom-palenight t))
  

  ;; (use-package heaven-and-hell
  ;;   :ensure t
  ;;   :init
  ;;   (setq heaven-and-hell-theme-type 'dark)
  ;;   (setq heaven-and-hell-themes
  ;;         '((light . doom-acario-light)
  ;;           (dark . doom-palenight)))
  ;;   :hook (after-init . heaven-and-hell-init-hook)
  ;;   :bind (("C-c <f6>" . heaven-and-hell-load-default-theme)
  ;;          ("<f6>" . heaven-and-hell-toggle-theme)))

#+END_SRC

If you press F6 key in your keyboard, it should switch between doom-palenight and doom-acario-light themes. If you want to go back to the default theme press ~Ctrl + C and F6~.

* copy cut line

#+begin_src emacs-lisp
  ;;  copy region or whole line
  (global-set-key "\M-w"
    (lambda ()
      (interactive)
      (if mark-active
          (kill-ring-save (region-beginning)
          (region-end))
        (progn
         (kill-ring-save (line-beginning-position)
         (line-end-position))
         (message "copied line")))))


    ;; kill region or whole line
    (global-set-key "\C-w"
    (lambda ()
      (interactive)
      (if mark-active
          (kill-region (region-beginning)
       (region-end))
        (progn
         (kill-region (line-beginning-position)
      (line-end-position))
         (message "killed line")))))
#+end_src

#+RESULTS:
* Durchsicht f8
#+BEGIN_SRC emacs-lisp
  (setq is-alpha nil)
  (defun transform-window (a ab)
    (set-frame-parameter (selected-frame) 'alpha (list a ab))
    (add-to-list 'default-frame-alist (cons 'alpha (list a ab)))
    )
  (global-set-key [(f8)] (lambda()
                           (interactive)
                           (if is-alpha
                               (transform-window 100 100)
                             (transform-window 75 50))
                           (setq is-alpha (not is-alpha))))
#+END_SRC

#+RESULTS:
| lambda | nil | (interactive) | (if is-alpha (transform-window 100 100) (transform-window 75 50)) | (setq is-alpha (not is-alpha)) |
* Deutsch Rechtschreiben check f9
sudo apt install ispell 
sudo apt install aspell-de aspell-en
sudo apt-get install aspell-es aspell-eu-es

after all input is done, 
M-x ispell  to start dictionaries to check all region

while the inputing, 
M-x flyspell-mode to check the input live, 
Mäuse -2 to Kolleg  the input 

flyspell-correct-word
C-. :flyspell-auto-correct-word (turn by turn)


#+begin_src emacs-lisp
  ;;switch dictionaries between German and English with F9 key
  (defun fd-switch-dictionary()
    (interactive)
    (let* ((dic ispell-current-dictionary)
           (change (if (string= dic "deutsch8") "english" "deutsch8")))
      (ispell-change-dictionary change)
      (message "Dictionary switched from %s to %s" dic change)
      ))
  (global-set-key (kbd "<f9>")   'fd-switch-dictionary)
#+end_src
* echo-key

M-x echo-keys-mode
#+BEGIN_SRC emacs-lisp

(defvar *echo-keys-last* nil "Last command processed by `echo-keys'.")

(defun echo-keys-mode ()
  (interactive)
  (if (member 'echo-keys-hook pre-command-hook)
      (progn
        (remove-hook 'pre-command-hook 'echo-keys-hook)
        (dolist (window (window-list))
          (when (eq (window-buffer window) (get-buffer "*echo-key*"))
            (delete-window window))))
    (progn
      (add-hook 'pre-command-hook 'echo-keys-hook)
      (delete-other-windows)
      (split-window nil (- (window-width) 8) t)
      (other-window 1)
      (switch-to-buffer (get-buffer-create "*echo-key*"))
      (set-window-dedicated-p (selected-window) t)
      (other-window 1))))

(defun echo-keys-hook ()
  (let ((deactivate-mark deactivate-mark))
    (when (this-command-keys)
      (with-current-buffer (get-buffer-create "*echo-key*")
        (goto-char (point-max))
        ;; self  self
        ;; self  other \n
        ;; other self  \n
        ;; other other \n
        (unless (and (eq 'self-insert-command *echo-keys-last*)
                     (eq 'self-insert-command this-command))
          (insert "\n"))
        (if (eql this-command 'self-insert-command)
            (let ((desc (key-description (this-command-keys))))
              (if (= 1 (length desc))
                  (insert desc)
                (insert " " desc " ")))
          (insert (key-description (this-command-keys)))
          )
        (setf *echo-keys-last* this-command)
        (dolist (window (window-list))
          (when (eq (window-buffer window) (current-buffer))
            ;; We need to use both to get the effect.
            (set-window-point window (point))
            (end-of-buffer)))))))

(provide 'echo-keys)


#+END_SRC
* chinese fonts
install cnfonts
M-x cnfonts-edit-profile
#+begin_src emacs-lisp
  ;; (use-package cnfonts
  ;; :ensure t
  ;; :config )

  (require 'cnfonts)
   ;; 让 cnfonts 随着 Emacs 自动生效。
   (cnfonts-enable)
   ;; 让 spacemacs mode-line 中的 Unicode 图标正确显示。
  (cnfonts-set-spacemacs-fallback-fonts)

#+end_src

#+RESULTS:
| cnfonts-set-font-first-time |
* evil model 
#+begin_src emacs-lisp
(require 'evil)
(evil-mode 1)
#+end_src
* mu4e
[[https://www.djcbsoftware.nl/code/mu/mu4e/index.html#SEC_Contents][mu4e tutorials]]
|------------------------------+---------------------------+------------------------|
| mbsync receive email         | ~/.mbsyncrc               | mbsync conton settings |
| mbsync receive email         | ~/Maildir/.mbsyncpass.gpg | mbsync passwd          |
| mu4e use mbsync to send mail | ~/.authinfo.gpg           | machine                |
| mbsync to mu4e               | myemacs.org               | mu4                    |
|                              |                           |                        |
in Google Konto: Zugriff durch weniger sichere Apps: AN
M-x: org~mu4e-mime-switch-headers-or-body  to edit the mail in orgmode
** mbsync conton setting
#+begin_src 
########################################
# Gmail
########################################
IMAPAccount gmail
Host imap.gmail.com
User scofild429@gmail.com
PassCmd "gpg2 -q --for-your-eyes-only --no-tty -d ~/Maildir/.mbsyncpass.gpg"
Port 993
SSLType IMAPS
CertificateFile /etc/ssl/certs/ca-certificates.crt

IMAPStore gmail-remote
Account gmail

MaildirStore gmail-local
Path ~/Maildir/Gmail/
Inbox  ~/Maildir/Gmail/Inbox
Subfolders Verbatim

Channel gmail
Master :gmail-remote:
Slave :gmail-local:
Create Both
Expunge Both
Patterns *
SyncState *
CopyArrivalDate yes
Sync All


########################################
# unimail
########################################
# IMAPAccount unimail
# Host email.stud.uni-goettingen.de
# User ug-student\silin.zhao
# #User silin.zhao@stud.uni-goettingen.de
# PassCmd "gpg2 -q --for-your-eyes-only --no-tty -d ~/Maildir/.unimail.gpg"
# Port 993
# SSLType STARTTLS
# CertificateFile /etc/ssl/certs/ca-certificates.crt

# IMAPStore unimail-remote
# Account unimail

# MaildirStore unimail-local
# Path ~/Maildir/Unimai/
# Inbox ~/Maildir/Unimail/Inbox
# SubFolders Verbatim

# Channel unimail
# Master :unimail-remote:
# Slave :unimail-local:
# Patterns *
# SyncState *
# Expunge None
# CopyArrivalDate yes
# Create Both
# Sync All



########################################
# qq.com
########################################
IMAPAccount qq
Host imap.qq.com
User 364638790@qq.com
PassCmd "gpg2 -q --for-your-eyes-only --no-tty -d ~/Maildir/.qq.gpg"
Port 993
SSLType IMAPS
CertificateFile /etc/ssl/certs/ca-certificates.crt

IMAPStore qq-remote
Account qq

MaildirStore qq-local
Path ~/Maildir/QQ/
Inbox  ~/Maildir/QQ/Inbox
SubFolders Verbatim

Channel qq
Master :qq-remote:
Slave :qq-local:
Create Both
Expunge Both
Patterns *
SyncState *
CopyArrivalDate yes
Sync All


########################################
# outlook
########################################
IMAPAccount outlook
Host smtp-mail.outlook.com
User mscofild429@outlook.com
PassCmd "gpg2 -q --for-your-eyes-only --no-tty -d ~/Maildir/.outlook.gpg"
Port 993
SSLType IMAPS
CertificateFile /etc/ssl/certs/ca-certificates.crt

IMAPStore outlook-remote
Account outlook

MaildirStore outlook-local
Path ~/Maildir/Outlook/
Subfolders Verbatim

Channel outlook
Master :outlook-remote:
Slave :outlook-local:
Create Both
Expunge Both
Patterns *
SyncState *
CopyArrivalDate yes
Sync All



########################################
# 163
########################################
# IMAPAccount 163
# Host imap.163.com
# User mscofild429@163.com
# PassCmd "gpg2 -q --for-your-eyes-only --no-tty -d ~/Maildir/.163.gpg"
# Port 993
# SSLType IMAPS
# CertificateFile /etc/ssl/certs/ca-certificates.crt

# IMAPStore 163-remote
# Account 163

# MaildirStore 163-local
# Path ~/Maildir/Wangyi163/
# Inbox  ~/Maildir/Wangyi163/Inbox
# SubFolders Verbatim

# Channel 163
# Master :163-remote:
# Slave :163-local:
# Create Both
# Expunge Both
# Patterns *
# SyncState *
# CopyArrivalDate yes
# Sync All


#+end_src

** mbsync pd
xxxxxx
gpg2 --output ~/Maildir/.mbsyncpass.gpg --symmetric ~/Maildir/.mbsyncpass
** machine
machine mail.example.com login myusername port 587 password mypassword
gpg2 --output ~/.authinfo --symmetric ~/.authinfo.gpg

** mu4e settings
sudo apt install isync
save this into ~/.mbsyncrc
mbsync -a
sudo apt install mu4e

gpg2 --output .mbsyncpass.gpg --symmetric .mbsyncpass

mu index --maildir=~/Maildir  

#+begin_src emacs-lisp
      (use-package mu4e
        :ensure nil
        :load-path "/usr/share/emacs/site-lisp/mu4e/"
        ;; :defer 20 ; Wait until 20 seconds after startup
        :config

        ;; This is set to 't' to avoid mail syncing issues when using mbsync
        (setq mu4e-change-filenames-when-moving t)

        ;; Refresh mail using isync every 10 minutes
        (setq mu4e-update-interval (* 10 60))
        (setq mu4e-get-mail-command "mbsync -a")
        (setq mu4e-maildir "~/Maildir"))

        ;; Make sure plain text mails flow correctly for recipients
        (setq mu4e-compose-format-flowed t)

        ;; Configure the function to use for sending mail
      (setq message-send-mail-function 'smtpmail-send-it)

      (setq mu4e-compose-signature
            (concat
             "Best regrads\n"
             "Silin Zhao")
            )

      (setq mu4e-contexts
            (list
             ;; Work account
             (make-mu4e-context
              :name "Gmail"
              :match-func
              (lambda (msg)
                (when msg
                  (string-prefix-p "/Gmail" (mu4e-message-field msg :maildir))))
              :vars '((user-mail-address . "scofild429@gmail.com")
                      (user-full-name    . "Silin Zhao")
                      (smtpmail-smtp-server  . "smtp.gmail.com")
                      (smtpmail-smtp-service . 465)
                      (smtpmail-stream-type  . ssl)
    ;;                  (mu4e-drafts-folder  . "/Gmail/Drafts")
                      ;;                    (mu4e-sent-folder  . "/Gmail/Sent")
  ;;                    (mu4e-refile-folder  . "/Gmail/Inbox")
  ;;                    (mu4e-trash-folder  . "/Gmail/Trash")
                      ))
             ;; (make-mu4e-context
             ;;  :name "QQ"
             ;;  :match-func
             ;;  (lambda (msg)
             ;;    (when msg
             ;;      (string-prefix-p "/QQ" (mu4e-message-field msg :maildir))))
             ;;  :vars '((user-mail-address . "364638790@qq.com")
             ;;          (user-full-name    . "Silin Zhao")
             ;;          (smtpmail-smtp-server  . "smtp.qq.com")
             ;;          (smtpmail-smtp-service . 465)
             ;;          (smtpmail-stream-type  . ssl)
             ;;          (mu4e-drafts-folder  . "/QQ/Drafts")
             ;;          (mu4e-sent-folder  . "/QQ/Sent Messages")
             ;;          (mu4e-refile-folder  . "/QQ/Inbox")
             ;;          (mu4e-trash-folder  . "/QQ/Deleted Messages")))
             (make-mu4e-context
              :name "Outlook"
              :match-func
              (lambda (msg)
                (when msg
                  (string-prefix-p "/Outlook" (mu4e-message-field msg :maildir))))
              :vars '((user-mail-address . "mscofild429@outlook.com")
                      (user-full-name    . "Silin Zhao")
                      (smtpmail-smtp-server  . "smtp.office365.com")
                      (smtpmail-smtp-service . 465)
                      (smtpmail-stream-type  . ssl)
                      (mu4e-drafts-folder  . "/Outlook/Drafts")
    ;;                  (mu4e-sent-folder  . "/Outlook/Sent")
                      (mu4e-refile-folder  . "/Outlook/Inbox")
                      (mu4e-trash-folder  . "/Outlook/Deleted")))
             ))

      (setq mu4e-maildir-shortcuts
            '(("/Gmail/Inbox" . ?i)
              ("/Gmail/[Gmail]/Sent Mail" . ?s)
              ("/Gmail/[Gmail]/Drafts" . ?d)
              ("/Gmail/[Gmail]/All Mail" . ?g)
              ("/QQ/Inbox" . ?I)
              ("/QQ/Sent Messages" . ?S)
              ("/QQ/*" . ?q)
              ("/Outlook/*" . ?O)
              ("/Outlook/Sent" . ?K)
              ("/Outlook/Inbo" . ?k)
              )
            )

#+end_src

** mu4e background settingns

[[https://www.djcbsoftware.nl/code/mu/mu4e/MSGV-Keybindings.html][mu4e shourtcuts]]
with (M-x mu4e-no-background ) html email can be read very clear, no small box background.
but in SRC source block here are no highlight


#+begin_src emacs-lisp
  (require 'org-mu4e)
  (setq org-mu4e-convert-to-html t)
  (setq mu4e-view-prefer-html t)
  (add-to-list 'mu4e-view-actions
               '("ViewInBrowser" . mu4e-action-view-in-browser) t)


  (defun mu4e-no-background()
    (interactive )
    (setq shr-use-colors t)
    (advice-add #'shr-colorize-region :around (defun shr-no-colourise-region (&rest ignore)))
    (setq shr-color-visible-luminance-min 60)
    (setq shr-color-visible-distance-min 5)
    )


#+end_src

** mu4e for image to read in receive
#+begin_src emacs-lisp
;; enable inline images
(setq mu4e-view-show-images t)
;; use imagemagick, if available
(when (fboundp 'imagemagick-register-types)
  (imagemagick-register-types))

(setq org-latex-create-formula-image-program 'dvipng)
#+end_src
** mu4e for image in orgmode to send
M-x: org~mu4e-mime-switch-headers-or-body to orgmode
*** ditta
after :file I can add any path to output, and can be send together
*** latex
1- create the image through the src of latex output with normally path
2- add the photo with [[]] with ../../ because the base is /tmp/file/ , so *return* to the root at frist
3- if I want to send the latex source code together. with :exports both

** org mime
#+begin_src emacs-lisp
  ;; (use-package org-mime)
  ;; (setq org-mime-library 'mml)

#+end_src

#+RESULTS:
: mml

* ielm
|-------+---------------------------------------|
| C-c e | open the ELISP terminal               |
| C-c e | execute the context in ELISP terminal |
|-------+---------------------------------------|

#+begin_src emacs-lisp
(defun efs/ielm-send-line-or-region ()
  (interactive)
  (unless (use-region-p)
    (forward-line 0)
    (set-mark-command nil)
    (forward-line 1))
  (backward-char 1)
  (let ((text (buffer-substring-no-properties (region-beginning)
                                              (region-end))))
    (with-current-buffer "*ielm*"
      (insert text)
      (ielm-send-input))

    (deactivate-mark)))

(defun efs/show-ielm ()
  (interactive)
  (select-window (split-window-vertically -10))
  (ielm)
  (text-scale-set 1))

(define-key org-mode-map (kbd "C-c e") 'efs/ielm-send-line-or-region)
(define-key org-mode-map (kbd "C-c E") 'efs/show-ielm)

#+end_src

* PDF tools
[[https://github.com/politza/pdf-tools][github link]]


sudo apt install libpng-dev zlib1g-dev
sudo apt install libpoppler-glib-dev
sudo apt install libpoppler-private-dev

M-x pdf-tools-install RET
M-x pdf-info-check-epdfinfo RET

M-x: pdf-view-mode to view es in pdf-tools mode 
#+begin_src emacs-lisp
  (use-package pdf-tools
    :ensure t
    :config)
#+end_src
* recentf
#+begin_src emacs-lisp
  (require 'recentf)
  (recentf-mode 1)
  (setq recentf-max-menu-items 25)
  (global-set-key "\C-x\ \C-r" 'recentf-open-files)
#+end_src
* which key
Brings up some help
#+BEGIN_SRC emacs-lisp
    (use-package which-key
      :ensure t
      :config
      (which-key-mode))

#+END_SRC
* Rectangle
|------------------+---------+-----------------------------------|
| string-rectangle | C-x r t | add the same in the select column |
| kill-rectangle   | C-x r k | delete the seleted column         |
| yank-rectangle   | C-x r y | yank the column                   |
| rectangle-make   | C-x Spe | select range                      |
|------------------+---------+-----------------------------------|

* Counsel
#+BEGIN_SRC emacs-lisp
   (use-package counsel
  :ensure t
  :bind
  (("M-y" . counsel-yank-pop)
   :map ivy-minibuffer-map
   ("M-y" . ivy-next-line)))
   #+end_src
* ivy
#+begin_src emacs-lisp
  (use-package ivy
  :ensure t
  :diminish (ivy-mode)
  :bind (("C-x b" . ivy-switch-buffer))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "%d/%d ")
  (setq ivy-display-style 'fancy))
#+end_src

* Swiper
#+begin_src emacs-lisp


  (use-package swiper
  :ensure t
  :bind (("C-s" . swiper-isearch)
         ("C-c C-r" . ivy-resume)
         ("M-x" . counsel-M-x)
         ("C-x C-f" . counsel-find-file))
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    ))
#+END_SRC

#+RESULTS:
: counsel-find-file
* AutoPairs
#+begin_src emacs-lisp
  ;; (use-package autopair
  ;; :config (autopair-global-mode))


#+end_src
* Avy 
See https://github.com/abo-abo/avy for more info

#+BEGIN_SRC emacs-lisp
  (use-package avy
  :ensure t
  :bind ("M-s" . avy-goto-word-1)) ;; changed from char as per jcs
#+END_SRC
* Autocomplete
#+BEGIN_SRC emacs-lisp
    (use-package auto-complete
    :ensure t
    :init
    (progn
    (ac-config-default)
      (global-auto-complete-mode t)
     ))

#+END_SRC

#+RESULTS:

* Flycheck
#+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :init
      (global-flycheck-mode t))
#+END_SRC

#+RESULTS:
* Yasnippet
#+BEGIN_SRC emacs-lisp

  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1)
    :config
    (add-to-list 'yas-snippet-dirs (locate-user-emacs-file "snippets")))


#+END_SRC



#+RESULTS:
: t
* auto-yasnippet
#+BEGIN_SRC emacs-lisp
(use-package auto-yasnippet
:ensure t)
#+END_SRC
* Undo Tree
#+BEGIN_SRC emacs-lisp
    (use-package undo-tree
      :ensure t
      :init
      (global-undo-tree-mode))
#+END_SRC
* general
#+begin_src emacs-lisp
  (use-package general
      :ensure t
      :config)
  (general-define-key 
   "C-M-j" 'counsel-switch-buffer)

#+end_src
* command-log-mode
C-c o (clm/toggle-comand-log-buffer) to open command-log and again to close
#+begin_src emacs-lisp
  (use-package command-log-mode)
  (global-command-log-mode t)
#+end_src
* EAF

pip3 install epc
pip3 install PyQt5
pip install PyQtWebEngine
pip install wmctrl
pip install PyGetWindow
pip install PyMuPDF
pip install qtconsole


Vimium : [[https://vimium.github.io/][Vimium shourtcuts]]
EAF : [[https://github.com/manateelazycat/emacs-application-framework/wiki/Keybindings][EAF shortcuts]]
eaf-proxy-caret
|-----+--------------------|
| G   | top                |
| g   | bottom             |
| C-n | down               |
| C-p | up                 |
| C-f | forward            |
| C-b | back               |
| w   | next word          |
| b   | provious           |
| (   | next sentence      |
| )   | privous   sentence |
| v   | toggle mark        |
| c   | find postion       |
|-----+--------------------|


#+begin_src emacs-lisp
  (require 'eaf)
    (use-package eaf
      :load-path "~/.emacs.d/emacs-application-framework" ; Set to "/usr/share/emacs/site-lisp/eaf" if installed from AUR
      :custom
      (eaf-find-alternate-file-in-dired t)
      :config
      (eaf-bind-key scroll_up "C-n" eaf-pdf-viewer-keybinding)
      (eaf-bind-key scroll_down "C-p" eaf-pdf-viewer-keybinding)
      (eaf-bind-key take_photo "p" eaf-camera-keybinding))

#+end_src
* EXWM
#+begin_src emacs-lisp

  ;; (defun efs/exwm-update-class ()
  ;;   (exwm-workspace-rename-buffer exwm-class-name))

  ;; (use-package exwm
  ;;   :config
  ;;   ;; Set the default number of workspaces
  ;;   (setq exwm-workspace-number 5)

  ;;   ;; When window "class" updates, use it to set the buffer name
  ;;   ;; (add-hook 'exwm-update-class-hook #'efs/exwm-update-class)

  ;;   ;; These keys should always pass through to Emacs
  ;;   (setq exwm-input-prefix-keys
  ;;     '(?\C-x
  ;;       ?\C-u
  ;;       ?\C-h
  ;;       ?\M-x
  ;;       ?\M-`
  ;;       ?\M-&
  ;;       ?\M-:
  ;;       ?\C-\M-j  ;; Buffer list
  ;;       ?\C-\ ))  ;; Ctrl+Space

  ;;   ;; Ctrl+Q will enable the next key to be sent directly
  ;;   (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

  ;;   ;; Set up global key bindings.  These always work, no matter the input state!
  ;;   ;; Keep in mind that changing this list after EXWM initializes has no effect.
  ;;   (setq exwm-input-global-keys
  ;;         `(
  ;;           ;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
  ;;           ([?\s-r] . exwm-reset)

  ;;           ;; Move between windows
  ;;           ([s-left] . windmove-left)
  ;;           ([s-right] . windmove-right)
  ;;           ([s-up] . windmove-up)
  ;;           ([s-down] . windmove-down)

  ;;           ;; Launch applications via shell command
  ;;           ([?\s-&] . (lambda (command)
  ;;                        (interactive (list (read-shell-command "$ ")))
  ;;                        (start-process-shell-command command nil command)))

  ;;           ;; Switch workspace
  ;;           ([?\s-w] . exwm-workspace-switch)

  ;;           ;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
  ;;           ,@(mapcar (lambda (i)
  ;;                       `(,(kbd (format "s-%d" i)) .
  ;;                         (lambda ()
  ;;                           (interactive)
  ;;                           (exwm-workspace-switch-create ,i))))
  ;;                     (number-sequence 0 9))))

  ;;   (exwm-enable))

#+end_src
* Impatient Mode
 M-x package-install impatient-mode 
 M-x httpd-start
 M-x impatient-mode
#+begin_src emacs-lisp
(use-package impatient-mode
:ensure t
:config )
(require 'impatient-mode)
#+end_src

#+RESULTS:
: impatient-mode

* Projectile
#+begin_src emacs-lisp
  ;; projectile
  (use-package projectile
    :ensure t
    :bind ("C-c p" . projectile-command-map)
    :config
    (projectile-global-mode)
    (setq projectile-completion-system 'ivy))


#+end_src
* fold this
M-x : package install :  fold this
#+BEGIN_SRC emacs-lisp
;;(global-set-key (kbd "C-c C-f") 'fold-this-all)
(global-set-key (kbd "C-M-f") 'fold-this)
;;(global-set-key (kbd "C-c M-f") 'fold-this-unfold-all)

#+END_SRC

#+RESULTS:
: fold-this
* Helm
C-x C-f  :find files in dire mode
C-l go back to the above directory
#+begin_src emacs-lisp
  (use-package helm
  :ensure t
  :config )

  (helm-mode 1)
  (require 'helm-config)
  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "M-y") 'helm-show-kill-ring)
;;  (global-set-key (kbd "C-x C-f") 'helm-find-files)
#+end_src

#+RESULTS:
: helm-find-files
* Magit
C-x g
s/S


#+BEGIN_SRC emacs-lisp
(use-package magit
:ensure
:bind (("C-x g" . magit-status)))

#+END_SRC

#+RESULTS:
: magit-status
* Latex
sudo apt install texlive-full
sudo apt install texlive-xetex
M-x: install package latex-math-preview
#+BEGIN_SRC emacs-lisp

  (global-set-key "\C-\M-l" 'latex-math-preview-insert-mathematical-symbol)
  ;; bigger latex fragment: put this into the init.el, otherweise this will not be executed
  (plist-put org-format-latex-options :scale 3.0)

  (require 'org)
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
  (setq org-latex-create-formula-image-program 'dvipng)

  (use-package tex
    :ensure auctex)

  (setq Tex-auto-save t)
  (setq Tex-parse-self t)
  (setq-default Tex-master nil)

  (setq org-latex-compiler "xelatex")
  ;;enable cdlatex
  (add-hook 'org-mode-hook 'turn-on-org-cdlatex)

  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (add-to-list 'TeX-command-list '("XeLaTeX" "%`xelatex --synctex=1%(mode)%' %t" TeX-run-TeX nil t))))
#+END_SRC

#+RESULTS:
| turn-on-org-cdlatex | turn-on-auto-fill | turn-on-flyspell | (lambda nil (org-bullets-mode 1)) | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-block-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |
* json mode
active hs-minor-mode 
hs-hide and show
#+begin_src emacs-lisp
 	     (use-package json-mode)
#+end_src

* hs-minor-mode
M-x: hs-minor-mode active
hs-hide-all
hs-toggle-hide (at the begin of breckt)
hs-show-all
hs-hide-block
hs-show-block

* markdown
#+begin_src emacs-lisp
  (use-package grip-mode
  :ensure t
  :config)

  (use-package markdown-mode
      :ensure t
      :commands (markdown-mode gfm-mode)
      :mode (("README\\.md\\'" . gfm-mode)
             ("\\.md\\'" . markdown-mode)
             ("\\.markdown\\'" . markdown-mode))
      :init (setq markdown-command "multimarkdown"))
#+end_src
* Stardict 
 sudo apt install  stardict 
 sudo apt install  sdcv 
 download dictionaries from
 http://download.huzheng.org/ 
 http://download.huzheng.org/zh_TW/
 extract, and put them in /usr/share/stardict/dic/ 
#+BEGIN_SRC emacs-lisp
  ;; (global-set-key (kbd "C-c z") 'kid-sdcv-to-buffer)
  ;; (defun kid-sdcv-to-buffer ()
  ;;   (interactive)
  ;;   (let ((word (if mark-active
  ;;                   (buffer-substring-no-properties (region-beginning) (region-end))
  ;;                   (current-word nil t))))
  ;;     (setq word (read-string (format "Search the dictionary for (default %s): " word)
  ;;                             nil nil word))
  ;;     (set-buffer (get-buffer-create "*sdcv*"))
  ;;     (buffer-disable-undo)
  ;;     (erase-buffer)
  ;;     (let ((process (start-process-shell-command "sdcv" "*sdcv*" "sdcv" "-n" word)))
  ;;       (set-process-sentinel
  ;;        process
  ;;        (lambda (process signal)
  ;;          (when (memq (process-status process) '(exit signal))
  ;;            (unless (string= (buffer-name) "*sdcv*")
  ;;              (setq kid-sdcv-window-configuration (current-window-configuration))
  ;;              (switch-to-buffer-other-window "*sdcv*")
  ;;              (local-set-key (kbd "d") 'kid-sdcv-to-buffer)
  ;;              (local-set-key (kbd "q") (lambda ()
  ;;                                         (interactive)
  ;;                                         (bury-buffer)
  ;;                                         (unless (null (cdr (window-list))) ; only one window
  ;;                                           (delete-window)))))
  ;;            (goto-char (point-min))))))))

#+END_SRC

#+RESULTS:
: kid-sdcv-to-buffer



#+RESULTS:

* Add Time now 
#+BEGIN_SRC  emacs-lisp
(defun now ()
(interactive)
( insert (current-time-string)))

#+END_SRC

#+RESULTS:
: now

* html-chrome
https://github.com/nikclayton/ob-html-chrome
#+begin_src emacs-lisp
(use-package ob-html-chrome
:ensure t
:config)

  (require 'ob-html-chrome)
  (setq org-confirm-babel-evaluate
        (lambda (lang body)
          (not (string= lang "html-chrome"))))

  (setq org-babel-html-chrome-chrome-executable
        "/usr/bin/google-chrome")
#+end_src

#+RESULTS:
: /usr/bin/google-chrome
* company
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3)
    (global-company-mode t))

  (with-eval-after-load 'company
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") 'company-select-next)
    (define-key company-active-map (kbd "C-p") 'company-select-previous))

  (use-package autoinsert
    :ensure t
    :config
    (setq auto-insert-query nil)
    (add-hook 'find-file-hook 'auto-insert)
    (auto-insert-mode t))

#+end_src
* ispell-region
mark all the region I want to check, and M-X ispell-region
space for nothing and numbers for replace.
* Orgmode
** org config
#+begin_src emacs-lisp
     ;; (use-package org
     ;;   :ensure t
     ;;   :pin org)
     (use-package org-bullets
       :ensure t
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

     (custom-set-variables
      ;;  (customize-set-variables
      '(org-directory "~/Dropbox")
      '(org-default-notes-file (concat org-directory "/Note.org"))
      '(org-export-html-postamble nil)
      '(org-hide-leading-stars t)
      '(org-startup-folded (quote overview))
      '(org-startup-indented t)
      '(org-confirm-babel-evaluate nil)
      '(org-src-fontify-natively t)
      )


   ;;hide the emphasis markup (e.g. /.../ for italics, *...* for bold)
   (setq org-hide-emphasis-markers t)

    (use-package org-bullets
     :config
     (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  ;; (let* ((variable-tuple
  ;;          (cond ((x-list-fonts "ETBembo")         '(:font "ETBembo"))
  ;;                ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
  ;;                ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
  ;;                ((x-list-fonts "Verdana")         '(:font "Verdana"))
  ;;                ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
  ;;                (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
  ;;         (base-font-color     (face-foreground 'default nil 'default))
  ;;         (headline           `(:inherit default :weight bold :foreground ,base-font-color)))

  ;;    (custom-theme-set-faces
  ;;     'user
  ;;     `(org-level-8 ((t (,@headline ,@variable-tuple))))
  ;;     `(org-level-7 ((t (,@headline ,@variable-tuple))))
  ;;     `(org-level-6 ((t (,@headline ,@variable-tuple))))
  ;;     `(org-level-5 ((t (,@headline ,@variable-tuple))))
  ;;     `(org-level-4 ((t (,@headline ,@variable-tuple :height 0.6))))
  ;;     `(org-level-3 ((t (,@headline ,@variable-tuple :height 0.7))))
  ;;     `(org-level-2 ((t (,@headline ,@variable-tuple :height 0.8))))
  ;;     `(org-level-1 ((t (,@headline ,@variable-tuple :height 0.9))))
  ;;     `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil))))))


  (custom-theme-set-faces
    'user
    '(org-block ((t (:inherit fixed-pitch))))
    '(org-code ((t (:inherit (shadow fixed-pitch)))))
    '(org-document-info ((t (:foreground "dark orange"))))
    '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
    '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
    '(org-link ((t (:foreground "royal blue" :underline t))))
    '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
    '(org-property-value ((t (:inherit fixed-pitch))) t)
    '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
    '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
    '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
    '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))

#+end_src

** ditta for dot
#+BEGIN_SRC emacs-lisp
        (use-package htmlize :ensure t)
        (setq org-ditaa-jar-path "/usr/share/ditaa/ditaa.jar")
        ;;sure to enable software ditaa to work
#+END_SRC
** operation
src 前缀  
|----------------------------+--------------------------------------------|
| #+name: blockname          | blockname 可以被:noweb yes的代码块调用     |
| #+call :blockname(x = 3)   |                                            |
| #+PROPERTY: tangle xxx.tex | 全文所有相关码块导出到xxx.tex文件          |
| #+PROPERTY: comments org   | 全文org格式内容（不在src块中）导出时被注释 |
|                            |                                            |
|----------------------------+--------------------------------------------|

src 后缀
|------------------------+------------------------------------------|
| language               | function                                 |
| C/python/emacs-lisp    |                                          |
| :file abc.org          |                                          |
| :dir                   | 指定生成代码的路径                                |
| :results output        |                                          |
| :export   (到html文件) | code 只导出代码，results 只是结果 ，both |
| :session  my           | 可切换到生成的my buffer 操作             |
| :tangle  (创建源码）   | 文件名，yes, no                          |
| :noweb yes             | 对tangle和export作用                     |
| :tangle   xxx.py       | 输出文件                                 |
| :var  x=2              |                                          |
| :shebang               | 指定码块的解释器                         |
|                        |                                          |
|------------------------+------------------------------------------|

noweb:可以使用任何设定了名字的代码块，每次都是重新执行一遍所有相关代码。
session:后台会启动一个相应的解释器控制台，所有名称相同的代码块都会被加
载到该控制台，一直运行，并可以交互。

** checklist
可以在item后面加上[0/2] or [0%]
- [ ]  S-A-Ent for a new checklist
- [ ]  C-c C-c to finish this checklist
** link 

|----------+---------------+------------------------------|
| commands | function      | explain                      |
|----------+---------------+------------------------------|
| C-c C-o  | goto the link | must in the link description |
| C-c C-l  | edit the link | also in the link             |
| C-c C-.  | go back       |                              |
|----------+---------------+------------------------------|

 internal file

link define options

|----------------|
| * headline     |  
| #+NAME: target |
| <<target>>     |
|----------------|

 external file

#+begin_src 
[[.../file.org::345]] go to the file of line 345
[[.../file.org::target]] to to the file with target, 3 kinds of internal

[[file:~/code/main.c::255  ]]               进入到 255 行
[[file:~/xx.org::My Target ]]                   找到目标‘<<My Target>>’
[[file:~/xx.org::#my-custom-id]]               查找自定义 id 的项

#+end_src



#+RESULTS:
: /usr/share/ditaa/ditaa.jar

** ToDo
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
        '((type  "Work(w)" "Study(s)" "forFun(f)" "|")
          (sequence  "TODO(t!)"  "|" "DONE(d!)")
          ))

  (setq org-todo-keyword-faces
        '(
          ("Work" .       (:foreground "white" :weight bold))
          ("Study" .      (:foreground "yellow" :weight bold))
          ("forFun" .     (:foreground "red" :weight bold))
          ("DONE" .       (:foreground "green" :weight bold))
          ))


#+END_SRC
** Agenda  
#+begin_src emacs-lisp
  (global-set-key "\C-ca" 'org-agenda)
   (setq org-agenda-start-on-weekday nil)
   (setq org-agenda-custom-commands
         '(("c" "Simple agenda view"
            ((agenda "")
             (alltodo "")))))

   (global-set-key (kbd "C-c c") 'org-capture)

   (setq org-agenda-files (list 
                           "~/Dropbox/Note/Appointment.org"
                           ))

#+end_src

|-----------------+----------------------------------+---------------|
| comands         | explain                          | function      |
|-----------------+----------------------------------+---------------|
| C-c c           | add new capture                  | capture       |
| C-c C-s [fn:01] | add new scheduling to  items     | agenda        |
| C-c C-t [fn:02] | add new TODO to  items           | todo          |
| C-c C-d         | add new deadline to items        | agenda        |
| C-c a           | check  agenda function           | agenda        |
| C-c a a         | check all agenda items           | f, b          |
| S-f             | from capture list to file        | agenda        |
| C-'     [fn:03] | switch in all agenda file        | agenda        |
| C-c C-x C-c     | view todo, pri and tags of items | summary       |
| C-c C-c(q)      | add tags in items                | must in items |
|                 |                                  |               |
|-----------------+----------------------------------+---------------|

[fn:01]  在任何的item上，C-c C-s都可以增加scheduling,可以个性的指定加入的
日期和时间。如果该item有TODO 特性，增加 ++1w 在时间后面，可以多次更新

[fn:02] 在上次更新的-State "DONE"之前加上本次的完成情况，然后不管TODO
的标签是什么，C-c C-t d (done)， 该item的scheduling将会被自动更新到下
一次的设定时间(一周后)。在时间轴上显示历次完成情况.


[fn:03] shift + f can dynamical view the agenda items. and Tab goto
the linked agenda file.
** capture 
#+begin_src emacs-lisp


  (setq org-capture-templates
  '(
    ;; ("a" "Appointment" entry (file+headline "~/Dropbox/Note/Appointment.org"     "Appointment")  "* %u %? " :prepend t)
    ;;("n" "TagsNote"    entry (file+headline "~/Dropbox/Note/Note.org.gpg"        "TagsNote")     "* %u %? " :prepend t)
    ("n" "TagsNote"    entry (file+headline "~/Dropbox/Note/Appointment.org"        "TagsNote")     "* %u %? " :prepend t)
  ;; ("m" "Math"          entry (file+headline "~/Dropbox/Sprache/Math/Math.org"           "Math")  "* %u %? " :prepend t)
  ;; ("p" "Physik"        entry (file+headline "~/Dropbox/Sprache/Physik/Physik.org"      "Physik")  "* %u %? " :prepend t)
  ;; ("r" "ROS"           entry (file+headline "~/Dropbox/Sprache/ROS/ROS.org"               "ROS")  "* %u %? " :prepend t)
  ;; ("i" "Inf"           entry (file+headline "~/Dropbox/Sprache/Inf/Inf.org"               "Inf")  "* %u %? " :prepend t)
  ))
  (defadvice org-capture-finalize
      (after delete-capture-frame activate)
    "Advise capture-finalize to close the frame"
    (if (equal "capture" (frame-parameter nil 'name))
        (delete-frame)))
  (defadvice org-capture-destroy
      (after delete-capture-frame activate)
    "Advise capture-destroy to close the frame"
    (if (equal "capture" (frame-parameter nil 'name))
        (delete-frame)))
  (use-package noflet
    :ensure t )
  (defun make-capture-frame ()
    "Create a new frame and run org-capture."
    (interactive)
    (make-frame '((name . "capture")))
    (select-frame-by-name "capture")
    (delete-other-windows)
    (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
      (org-capture)))
      ;; (require 'ox-beamer)
      ;; for inserting inactive dates
      (define-key org-mode-map (kbd "C-c >") (lambda () (interactive (org-time-stamp-inactive))))

#+end_src
** tags
C-c C-q
** org encrypt
#+begin_src 
using: (epa-encrypt-file) pass the passwd, and  then delete the source file
open the encrypt file in emacs or (epa-decrypt-file) need the passwd
and after each time editiion when try saving the encrypt file, neeed to update passwd ,
and reopen this encrypt file with new passwd.
#+end_src

#+begin_src 
using: (org encrypt entry) pass also one passwd.
if open the entry with (org decrypt entry), the passwd will be needed
after each editation  and save the entry also need to update the passwd
reopen this entry with new passwd


OR add the crypt tags, this item will be encrypted everytime automatisch


Special Mark
if I (C-c C-s) to save file in crypt entry tags encrypt orgmode file, the passwd requirement
is 4 times, the first 2 time is for crypt entry tags, and the last 2 time is
for the encrypt file. remember, remember!!
#+end_src


#+begin_src emacs-lisp
  (require 'epa-file)
  (setq epa-file-select-key 0)
  (require 'org-crypt)
  (org-crypt-use-before-save-magic)
  (setq org-tags-exclude-from-inheritance (quote ("crypt")))
  (setq org-crypt-key nil)
#+end_src

* org-roam
"C-c n l" . org-roam
"C-c n f" . org-roam-find-file
"C-c n g" . org-roam-graph
"C-c n i" . org-roam-insert
"C-c n I" . org-roam-insert-immediate

org-roam-db-build-cache
org-roam-find-index
org-roam-find-file
org-roam-insert

sudo apt install sqlite

#+BEGIN_SRC emacs-lisp
  ;; (use-package org-roam
  ;;   :ensure t
  ;;   :hook
  ;;   (after-init . org-roam-mode)
  ;;   :custom
  ;;   (org-roam-directory "~/Dropbox/subjects/")
  ;;   :bind (:map org-roam-mode-map
  ;;               (("C-c n l" . org-roam)
  ;;                ("C-c n f" . org-roam-find-file)
  ;;                ("C-c n g" . org-roam-graph))
  ;;               :map org-mode-map
  ;;               (("C-c n i" . org-roam-insert))
  ;;               (("C-c n I" . org-roam-insert-immediate))))

  ;; (add-hook 'after-init-hook 'org-roam-mode)

  ;; (use-package org-roam-server
  ;;   :ensure t
  ;;   :config
  ;;   (setq org-roam-server-host "127.0.0.1"
  ;;         org-roam-server-port 9090
  ;;         org-roam-server-export-inline-images t
  ;;         org-roam-server-authenticate nil
  ;;         org-roam-server-label-truncate t
  ;;         org-roam-server-label-truncate-length 60
  ;;         org-roam-server-label-wrap-length 20))
  ;;   (org-roam-server-mode)

  ;; (setq org-roam-completion-system 'helm)
  ;; (setq org-roam-buffer-width 0.2)

  ;; (defun my/org-roam--backlinks-list-with-content (file)
  ;;   (with-temp-buffer
  ;;     (if-let* ((backlinks (org-roam--get-backlinks file))
  ;;               (grouped-backlinks (--group-by (nth 0 it) backlinks)))
  ;;         (progn
  ;;           (insert (format "\n\n* %d Backlinks\n"
  ;;                           (length backlinks)))
  ;;           (dolist (group grouped-backlinks)
  ;;             (let ((file-from (car group))
  ;;                   (bls (cdr group)))
  ;;               (insert (format "** [[file:%s][%s]]\n"
  ;;                               file-from
  ;;                               (org-roam--get-title-or-slug file-from)))
  ;;               (dolist (backlink bls)
  ;;                 (pcase-let ((`(,file-from _ ,props) backlink))
  ;;                   (insert (s-trim (s-replace "\n" " " (plist-get props :content))))
  ;;                   (insert "\n\n")))))))
  ;;     (buffer-string)))

  ;; (defun my/org-export-preprocessor (backend)
  ;;   (let ((links (my/org-roam--backlinks-list-with-content (buffer-file-name))))
  ;;     (unless (string= links "")
  ;;       (save-excursion
  ;;         (goto-char (point-max))
  ;;         (insert (concat "\n* Backlinks\n") links)))))

  ;; (add-hook 'org-export-before-processing-hook 'my/org-export-preprocessor)


#+END_SRC

#+RESULTS:
| my/org-export-preprocessor |
* helm-org-rifle
M-x: package install helm-org-rifle
在已经打开的所有文件中匹配搜索关键词，是所有打开文件
keywords searching in all opened files, external files,

#+Begin_src emacs-lisp
(use-package helm-org-rifle
:ensure t
:config)	    	    
  (require 'helm-org-rifle)
#+end_src

#+RESULTS:
: helm-org-rifle
* org-mind-map

[[https://github.com/the-humanities/org-mind-map][github link]] is here,

M-x org-mind-map-write  to execute 

add legend, text display, image display
:PROPERTIES:
:OMM-COLOR: GREEN
:org-mind-map-include-text  t
:org-mind-map-include-image  t
:OMM-LEGEND: Legend entry
:END:

#+begin_src emacs-lisp
  ;; This is an Emacs package that creates graphviz directed graphs from
  ;; the headings of an org file
  (use-package org-mind-map
    :init
    (require 'ox-org)
    :ensure t
    ;; Uncomment the below if 'ensure-system-packages` is installed
    ;;:ensure-system-package (gvgen . graphviz)
    :config
    (setq org-mind-map-engine "dot")       ; Default. Directed Graph
    ;; (setq org-mind-map-engine "neato")  ; Undirected Spring Graph
    ;; (setq org-mind-map-engine "twopi")  ; Radial Layout
    ;; (setq org-mind-map-engine "fdp")    ; Undirected Spring Force-Directed
    ;; (setq org-mind-map-engine "sfdp")   ; Multiscale version of fdp for the layout of large graphs
    ;; (setq org-mind-map-engine "twopi")  ; Radial layouts
    ;; (setq org-mind-map-engine "circo")  ; Circular Layout
    )


#+end_src

#+RESULTS:
: t
* org-journal
<<quickstart>>
|--------------------------------+------------------------------------------------|
| M-x  org-journal-mode          | activate the mode                              |
| C-c C-j(org-journal-new-entry) | create one, can be today, can be in the futher |
| C-u C-c C-j                    | go to the current entry                        |
| C-c C-t                        | add TODO                                       |
| C-c C-d                        | add deadline                                   |
| C-c a a                        | view in agenda                                 |
|--------------------------------+------------------------------------------------|
* org-noter
#+begin_src emacs-lisp
  (use-package org-noter
    :ensure t
    :config)
#+end_src
* Persentation 
** REVEAL.js
Before using it, must before active them
#+begin_src 
#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
#+REVEAL_INIT_OPTIONS: slideNumber:true
#+OPTIONS: num:nil toc:nil
#+REVEAL_THEME: black/white/league/sky/beige/simple/serif/blood/night/moon/solarized
#+REVEAL_TRANS: none/fade/slide/convex/concave/zoom
#+Title: Title of Your Talk
#+Author: Your Name
#+Email: Your Email Address or Twitter Handle
#+end_src


#+BEGIN_SRC emacs-lisp  :tangle no
  (use-package ox-reveal
    :ensure t
    :config
    (require 'ox-reveal)
    ;;(setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
    (setq org-reveal-mathjax t)
    )

#+END_SRC

** ox-beamer
M-x: org beamer mode
C-c C-e latex to beamer
template seeing [[./template/ox-beamer.org]]
#+begin_src emacs-lisp
  ;; (defun my-beamer-bold (contents backend info)
  ;;   (when (eq backend 'beamer)
  ;;     (replace-regexp-in-string "\\`\\\\[A-Za-z0-9]+" "\\\\textbf" contents)))

  ;; (add-to-list 'org-export-filter-bold-functions 'my-beamer-bold)

  ;; (defun my-beamer-structure (contents backend info)
  ;;   (when (eq backend 'beamer)
  ;;     (replace-regexp-in-string "\\`\\\\[A-Za-z0-9]+" "\\\\structure" contents)))

  ;; (add-to-list 'org-export-filter-strike-through-functions 'my-beamer-structure)

#+end_src

* org-msg
#+BEGIN_SRC 
- mbsync setting seeing in Dropbox
- C-c C-m to send email
- math :file output.png -> C-c C-c
- digraph ->
- graph --

#+END_SRC

* literatur Programm
** options
src 前缀  
|----------------------------+--------------------------------------------|
| #+name: blockname          | blockname 可以被:noweb yes的代码块调用     |
| #+call :blockname(x = 3)   |                                            |
| #+PROPERTY: tangle xxx.tex | 全文所有相关码块导出到xxx.tex文件          |
| #+PROPERTY: comments org   | 全文org格式内容（不在src块中）导出时被注释 |
|                            |                                            |
|----------------------------+--------------------------------------------|

src 后缀
|------------------------+------------------------------------------|
| language               | function                                 |
| C/python/emacs-lisp    |                                          |
| :file abc.org          |                                          |
| :dir                   | 指定生成代码的路径                                |
| :results output        |                                          |
| :export   (到html文件) | code 只导出代码，results 只是结果 ，both |
| :session  my           | 可切换到生成的my buffer 操作             |
| :tangle  (创建源码）   | 文件名，yes, no                          |
| :noweb yes             | 对tangle和export作用                     |
| :tangle   xxx.py       | 输出文件                                 |
| :var  x=2              |                                          |
| :shebang               | 指定码块的解释器                         |
|                        |                                          |
|------------------------+------------------------------------------|

noweb:可以使用任何设定了名字的代码块，每次都是重新执行一遍所有相关代码。
session:后台会启动一个相应的解释器控制台，所有名称相同的代码块都会被加
载到该控制台，一直运行，并可以交互。
** ditaa
sudo apt-get install ditaa
C-c C-x C-v to view
#+begin_src ditaa :file foto/ditaa1.png
+---------+
|         |
| 1       |
|         |
+----+----+---+
|222 |233     |
|    |        |
+----+--------+

#+end_src

#+RESULTS:
[[file:foto/ditaa1.png]]


#+begin_src ditaa :file foto/ditaa2.png
+------+   +-----+   +-----+   +-----+
|{io}  |   |{d}  |   |{s}  |   |cBLU |
| 2oo  +---+ Bar +---+ Baz +---+ Moo |
|      |   |     |   |     |   |     |
+------+   +-----+   +--+--+   +-----+
                        |
           /-----\      |      +------+
           |     |      |      | c1AB |
           | Goo +------+---=--+ Sh12 |
           \-----/             |      |
                               +------+
#+end_src

#+RESULTS:
[[file:foto/ditaa2.png]]
** graphviz
sudo apt install graphviz
#+BEGIN_SRC  dot :file ./foto/digraphmt.png
  digraph diagramm {
          MG [shape= box,color = red]
          MG1 [shape=box,color=red]        
          lambdaL1 [color=red]
          ROOT [shape=diamond]
          ROOT2 [shape=diamond]

          mh2 -> MG;
          mh3 -> MG;
          lambdaL1->MG;
          MG -> cs1[label = "pp>h2h2j"];
          cs1 -> ROOT[label = "w"];
          MG -> data_file;
          data_file -> Events_file [label = "1"];
          Events_file -> ROOT;
          ROOT -> sigma1;
          sigma1 -> lambdaL2[label = "2"];
          lambdaL2 -> MG1;	
          MG1->cs2;
          cs2 -> ROOT2[label = "w"];
          MG1 -> data_file_1;
          data_file_1 -> ROOT2 [label = "1"];
          ROOT2 -> sigma2;
          sigma2 -> lambdaL;

}
#+END_SRC

#+RESULTS:
[[file:./foto/digraphmt.png]]
** math
*** equation
#+BEGIN_SRC latex :file ~/Bilder/latex-math-1.png
\begin{eqnarray*}
\hat{f}(x) & \propto & \sum_{\nu} \frac{|F(\nu)H(\nu)|^2}{|N(\nu)|^2}  
           \frac{G(\nu)}{H(\nu)} e^{\frac{2 \pi i \nu x}{N}}\\
           & \propto & \sum_{\nu} \frac{|F(\nu)|^2}{|N(\nu)|^2} H(\nu) H^*(\nu) 
           \frac{G(\nu)}{H(\nu)} e^{\frac{2 \pi i \nu x}{N}}\\
           & \propto & \sum_{\nu} H^*(\nu) G(\nu) e^{\frac{2 \pi i \nu x}{N}}
\end{eqnarray*}

#+END_SRC

#+RESULTS:
#+begin_export latex
#+end_export

*** Matrix
#+begin_src latex  :file ~/Bilder/functionOfMatrix1.png  
\begin{equation}
  s_{kk'}=
  \left(
  \begin{array}{ccc}
          h_{1k} &
          \cdots &
          h_{nk}
  \end{array}
  \right)
  \left(
  \begin{array}{ccc}
          \bar{q}_{11} & \cdots & \bar{q}_{12}\\
          \vdots & \ddots & \vdots\\
          \bar{q}_{n1} & \cdots & \bar{q}_{n2}
  \end{array}
  \right)
  \left(
  \begin{array}{c}
          h_{1k'} \\
          \vdots \\
          h_{nk'}
 \end{array}
 \right)
\end{equation}
#+end_src

#+RESULTS:
#+begin_export latex
#+end_export
** parentheses
set  $$ X = \left( \begin{aligned}  aa \\ bb\\cc  \end{aligned} \right) $$
** Tabelle

#+BEGIN_SRC latex :file ~/Pictures/table.png
  \begin{table}[htbp]
  \centering
  \begin{tabular}{|c|c|c|}
  Überschrift 1 & Überschrift 2 & berschrift 3 \\
  \hline
  Eins & Zwei & Drei \\
  Vier & Fünf & Sechs \\
  \end{tabular}
  \caption[Tabelle]{Tolle Tabelle}
  \label{tab:toll1}
  \end{table}
#+END_SRC
** Special characters math 
#+BEGIN_SRC 

 latex-math-preview-insert-mathematical-symbol
this is to add special characters for latex
#+END_SRC
** Formation


添加大括号
#+begin_src 
\begin{cases}
\end{cases}
#+end_src

增加分行
#+begin_src 
\begin{aligned}
\end{aligned}
#+end_src

在orgmode中，Esc下面的~键可以调出希腊字母输入
C-z也可以调出特殊字符输入
#+begin_src 
$\mathcal{L}$
$\mathcal{B}$
#+end_src

$\mathcal{L}$
$\mathcal{B}$
** Compile Python2
#+BEGIN_SRC 
1. in Orgmode using SRC to save a python2 programm, with its interpreter
2. C-c ' opening the buffer
3. C-c C-p open the python interpreter, weather it is wanted
4. mark the region in programm buffer
5. C-c C-r import the marked region to the interpreter

#+END_SRC
** execute Program
#+BEGIN_SRC emacs-lisp
    (setq org-confirm-babel-evaluate nil
          org-src-fontify-natively t
          org-src-tab-acts-natively t)
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t)
       (ipython . t)
       (emacs-lisp . t)
       (java . t)
       (shell . t)
       (sql . t)
       (C . t)
       (js . t)
       (ditaa . t)
       (haskell . t)
       (dot . t)
       (org . t)
       (latex . t )
       (typescript . t)
       ))

  (with-eval-after-load 'org)

  ;; (nconc org-babel-default-header-args:java
  ;;        '((:dir . nil)
  ;;          (:results . value)))

#+END_SRC
#+RESULTS:
** config
#+begin_src emacs-lisp
  (use-package ob-ipython)
  (use-package ein)
#+end_src

#+RESULTS:

* programm settings
** ctags
Wiki : [[https://www.emacswiki.org/emacs/BuildTags][Emacs wiki]]

In Ubuntu there is a default ctags, but we need this,
just clone and install.
github for ctags [[https://github.com/universal-ctags/ctags][universal ctags]]
so the comands from Emacs wiki works

* Atomic-chrome
#+begin_src emacs-lisp
(use-package atomic-chrome
:ensure t
:config
(atomic-chrome-start-server))

(setq atomic-chrome-buffer-open-style 'frame)

#+end_src
* Initination
#+begin_src 
(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
			 ("melpa2" . "http://www.mirrorservice.org/sites/melpa.org/packages/")
			 ("melpa-stable" . "https://stable.melpa.org/packages/")
			 ("melpa3" . "http://www.mirrorservice.org/sites/stable.melpa.org/packages/")
                         ("elpa" . "https://elpa.gnu.org/packages/")
			  ("org" . "https://orgmode.org/elpa/")
 ))

 (package-initialize)

 ; Fetch the list of packages available 
 (unless package-archive-contents (package-refresh-contents))

 ; Install use-package
 (setq package-list '(use-package))
 (dolist (package package-list)
 (unless (package-installed-p package) (package-install package)))

(org-babel-load-file "~/Dropbox/cs/Limacs/myinit.org")
#+end_src

